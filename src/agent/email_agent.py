import pandas as pd
import logging

from tqdm.asyncio import tqdm_asyncio
from gpt4all import GPT4All

from src.constants import DEFAULT_LLM
from src.prompts.prompts import EmailAgentPrompt
from src.helpers import extract_fields_from_raw_result

logger = logging.getLogger(__name__)


class EmailAgent:
    """
    An asynchronous agent for classifying emails as 'Important' or 'Not Important'
    using a local large language model (LLM) via GPT4All.

    The agent leverages a configurable LLM to process each email's metadata
    (e.g., subject and sender) and determine its importance based on a structured prompt.
    The results are extracted, cleaned, and returned as an augmented pandas DataFrame.

    Attributes:
        model (str): The name or path of the GPT4All model to load.
        llm (GPT4All): The instantiated GPT4All model object used for text generation.
    """

    def __init__(self, model: str = DEFAULT_LLM):
        """
        Initialize the EmailAgent with a specified GPT4All model.

        Args:
            model (str, optional): The name or file path of the GPT4All model to use.
                Defaults to `DEFAULT_LLM` from `src.constants`.

        Example:
            >>> agent = EmailAgent(model="Meta-Llama-3.1-8B-Instruct-128k-Q4_0.gguf")
            >>> print(agent.model)
            'Meta-Llama-3.1-8B-Instruct-128k-Q4_0.gguf'
        """
        self.model = model
        self.llm = GPT4All(model)
        logger.info(f"Initialized model {self.model}")

    async def invoke(self, df: pd.DataFrame):
        """
        Process a DataFrame of emails asynchronously and return raw model responses.

        Args:
            df (pd.DataFrame): A pandas DataFrame containing email data with at least
                'Subject' and 'Sender' columns.

        Returns:
            list[str]: A list of raw string responses generated by the model
                for each email.

        Example:
            >>> results = await agent.invoke(df)
            >>> print(results[0])
            'IMPORTANT: No\nREASON: Promotional email from retailer\nCONFIDENCE: High'
        """
        logger.info(f"Processing {len(df)} emails using agent...")
        tasks = [self.process_row(row) for row in df.itertuples()]
        results = await tqdm_asyncio.gather(*tasks)
        return results

    async def process_row(self, row: pd.Series):
        """
        Process a single email row by generating a classification using the LLM.

        This method constructs the appropriate prompt for the given email,
        runs it through the GPT4All model, and returns the raw text output.

        Args:
            row (pd.Series): A pandas Series representing one email row.
                Must include 'Subject' and 'Sender' fields.

        Returns:
            str: The raw classification text generated by the LLM.
        """
        with self.llm.chat_session():
            subject = row.Subject
            sender = row.Sender
            prompt = EmailAgentPrompt.build(subject, sender)
            response = self.llm.generate(prompt)
        return response

    async def run(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        Execute the full email classification workflow.

        Steps:
            1. Generate raw LLM responses for each email using `invoke()`.
            2. Extract structured fields (Important, Reason, Confidence)
               using `extract_fields_from_raw_result()`.
            3. Merge the extracted data back into the original DataFrame.

        Args:
            df (pd.DataFrame): Input DataFrame containing at least 'Subject' and 'Sender' columns.

        Returns:
            pd.DataFrame: The input DataFrame augmented with new columns
                ['important', 'reason', 'confidence'] containing model results.

        Example:
            >>> final_df = await agent.run(df)
            >>> final_df[['Subject', 'important', 'confidence']].head()
                  Subject                              important confidence
            0   Credit Score Update                    No         High
            1   Invitation: Community Event            No         Medium
            2   Invoice Due Tomorrow                   Yes        High
        """
        results = await self.invoke(df)
        extracted_results = extract_fields_from_raw_result(results)
        results_df = pd.DataFrame(extracted_results)
        df = pd.concat([df, results_df], axis=1)
        return df
